제네릭
	1. 클래스나 메소드에서 컴파일할 때 타입체크
	2. 미리 색체(인스턴스)의 공통적인 타입을 명시해서 처리하기 때문에
	      안정성이 높고, 캐스팅(형변환)을 생략할 수 있다.
	3. 제네릭 클래스와 제네릭 메소드의 구현이 가능하다.
	4. 모든 컬렉션 프레임워크는 제네릭 처리가 되어 있어 제네릭을 반드시 알아야 한다.
	5. 2개 이상의 제네릭 타입 선언이 가능하다.
	6. 주의사항
		1) T obj = new T();    //불가능
		2) T[] arr = new T[3]; //불가능
		3) T[] arr;            //가능
		
	class Box <T> {
		private T obj;
		
		public void setObj(T obj) {
			this.obj = obj;
		}
		public void getObj() {
			return obj;
		}
//main
Box<String> box = new Box<>();      //구체화
Box<String> box = new Box<String>(); // 구체화는 ReferenceType
//T가 무엇인지 알려주는곳


//컴파일 시점
T <- String

	class Box <T> {   // T가  전부 String 로 바뀜     
 		private T obj;  // private String obj;
		
		public void setObj(T obj) { // public void setObj(String obj)
			this.obj = obj;
		}
		public void getObj() {
			return obj;
		}
			